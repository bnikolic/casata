% CASA Closure Tests HERA 19  -- v0.1
% Bojan Nikolic
% 12 September 2016 


Hera 19
=======

Preliminaries
-------------

I'm looking at the Cent A dataset. To reproduce Chris' results I've
averaged to three minutes using CASA split.


<<>>=
import os
import numpy

import matplotlib.pylab as plt

from clplot import clplot, clquants
from heraanalysis import *

# importuvfits("/data/archive/HERA-4/zen.2457458.53579.xx.HH.uvcU.uvfits", "/fast/temp/casaclosure2/centA.ms")

msin="/home/bnikolic/sciencedata/HERA-closure/centA.ms"

msavg='/home/bnikolic/sciencedata/HERA-closure/centA-timeavg.ms'

# Created a time averaged dat st
# split(msin, msavg, datacolumn="all",  timebin='185s')


@
<<caption="Histogram of the area of all triads in simulated HERA data">>=
p=clquants.triadArea(msin)
clplot.areaHist(p)
plt.show()
@

Thing to note: lots of triads with the same (small) areas, not all equilateral triangles.

Plot of one triad
-----------------

For initial test look at one triad only. I'm using triad 22, 9, 20 in
CASA notation (add one to get to Chris' numbers). I'm plotting versus
both frequency (horizontal axis) and time (different colours).

<<>>=
trset=[ [22, 9, 20]]
@
<<caption="Closure Phase on triad 22-9-20 as function of frequency. The different traces correspond to different 3-minute integrations">>=
xx=clquants.closurePhTriads(msavg, trset)

for i in range(len(trset)):
   # Dont plot last one because it won't be have as much data averaged into it
	plt.plot(xx[i,0,:,0:-1])
plt.show()
@


<<>>=
trset=[ [22, 9, 20], [9, 20, 53] ]
@
<<caption="Comparison of redundant triangles that agree well: 22-9-20 and 9-20-53">>=

xx=clquants.closurePhTriads(msavg, trset)

for i in range(len(trset)):
	plt.plot(xx[i,0,:,-2])
plt.show()
@

<<>>=
trset=[ [22, 9, 20], [81, 22, 20], [81, 20, 89]  ]
@
<<caption="Comparison of reundant triangles that do not agree: 22-9-20, 81-22-20 and 81-20-89">>=

xx=clquants.closurePhTriads(msavg, trset)

for i in range(len(trset)):
	plt.plot(xx[i,0,:,-2])
plt.show()
@





<<>>=
trset=[ [72, 22, 105], [105, 9, 88], [22, 20, 9], [10, 43, 89],
[9, 53, 64], [20, 31, 53], [89, 65, 31], [53, 104, 80], [31, 96, 104]]

@
<<caption="Comparison of redundant triangles from memo">>=

xx=clquants.closurePhTriads(msavg, trset)
tint=0
for i in range(len(trset)):
	plt.plot(xx[i,0,:,tint], label=("triad %i-%i-%i"%tuple(trset[i])))
plt.legend()
plt.show()
@


Plot of one Quad
----------------

<<>>=
#qd=[22, 9, 20, 81]
qd=[20, 53, 31, 89]
@
<<caption="Closure amplitude spectrum for three consecutive 3-minute integrations on the same quad. Note the logarithmic axis ">>=
xx=clquants.closureAmpQd(msavg, qd)
plt.plot(xx[0,:,0:-1], )
plt.ylim([0.1,20])
plt.yscale('log')
plt.title("Closure amplitude on quad %i-%i-%i-%i " % tuple(qd))
plt.show()
@

There is quite a large variation between (about 50% across much of the
band) in the closure amplitude between consecutive integrations.


<<>>=
#qd=[22, 9, 20, 81]
qd=[20, 53, 31, 89]
@
<<caption="Closure amplitude spectrum for 5  consecutive 10s integrations (i.e., non-averaged) on the same quad. Note the logarithmic axis ">>=
xx=clquants.closureAmpQd(msin, qd)
plt.plot(xx[0,:,10:15], )
plt.ylim([0.1,20])
plt.yscale('log')
plt.title("Closure amplitude on quad %i-%i-%i-%i " % tuple(qd))
plt.show()
@

Consecutive non-averaged integrations are clearly very close to each
other so there is a secular effect.


<<>>=
qd=[20, 53, 31, 89]
@
<<caption="Closure amplitude spectrum for 5   integrations each of duration of 10s and separated by intervals of 100s on the same quad. Note the logarithmic axis ">>=
xx=clquants.closureAmpQd(msin, qd)
plt.plot(xx[0,:,10:50:10], )
plt.ylim([0.1,20])
plt.yscale('log')
plt.title("Closure amplitude on quad %i-%i-%i-%i " % tuple(qd))
plt.show()
@

Same variation is seen in the long term for the 10s integrations as
for the 3-minute integrations. This excludes scintillation-type
effects.



Multiple Quad
-------------

<<>>=
qd=[ [105, 88,  9, 22],
	 [9, 64, 53, 20],
	 [20, 53, 31, 89],
	 [89, 31, 65, 43]]
@
<<caption="Closure amplitude spectrum for four different quads, all of the smallest size. Note the logarithmic axis">>=

for i in range(len(qd)):
	xx=clquants.closureAmpQd(msavg, qd[i])
	plt.plot(xx[0,:,0], label="quad %i-%i-%i-%i" % tuple(qd[i]))
plt.ylim([0.1,20])
plt.yscale('log')
plt.legend()
plt.show()
@
